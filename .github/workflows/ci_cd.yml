name: CI/CD

on:
  push:
    branches: [ solution ]
  pull_request:
    branches: [ solution ]

jobs:
  backend_flask:
    name: Backend (Flask)
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # Install Python dependencies
      - name: Install Python dependencies
        working-directory: ./backend_flask
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt;


      # Step 3: Lint Python code
      #### 
      - name: Lint Python code
        working-directory: ./backend_flask
        run: |
          if [ -f .flake8 ] || [ -f setup.cfg ] || [ -f tox.ini ] || [ -f .pep8 ]; then
            flake8 .
          else
            echo "No lint configuration found, skipping linting."
          fi

      # Step 4: Run Python tests
      ####
      - name: Run Python tests
        working-directory: ./backend_flask
        run: |
          if [ -f pytest.ini ] || ls tests; then
            pytest
          else
            echo "No tests found, skipping tests."
          fi


  frontend_react:
    name: Frontend (React)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: List repository structure
        run: ls -al

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install Node dependencies
        working-directory: ./frontend_react
        run: |
          if [ -f package.json ]; then npm install; fi

      - name: Lint React code
        working-directory: ./frontend_react
        run: |
          if npm run | grep -q 'lint'; then
            npm run lint
          else
            echo "No lint script defined in package.json, skipping linting."
          fi

      - name: Run React tests
        working-directory: ./frontend_react
        run: |
          if [ -f package.json ]; then npm test -- --watchAll=false; fi


  deploy:
    name: Deploy & Push to Docker Hub
    needs: [backend_flask, frontend_react]
    runs-on: ubuntu-latest
    #####!!!!!
    # Important step - add your environment name
    environment: PROD
    #####!!!!!

    steps:
        - uses: actions/checkout@v3

        # Optional: List repository files to verify the docker-compose file exists
        - name: List repository files
          run: ls -al

        # Step 7: Build docker image 
        # Go to dockerhub.com
        # Create a new repository - backend_flask
        # Create a new access token - <access_token>
        # Note down your username - <username>
        # Add the following secrets to your GitHub repository - Environment (name = TEST)
        # add the Environment name to the deploy job above (important step)
        # https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions
        #### 
        # Build the Docker image using the Dockerfile in the backend_flask folder
        - name: Build Docker Image
          run: |
            docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/backend_flask:latest ./backend_flask
            # make sure that your dockerhub repo name matches as this line (backend_flask)


        # Step 8: # Log in to Docker Hub
        #### 
        # Log in to Docker Hub
        - name: Log in to Docker Hub
          run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin



        # Step 9: Push docker image to dockerhub
        ####
        # Push the Docker image to Docker Hub
        - name: Push Docker Image
          run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend_flask:latest




